{"version":3,"sources":["components/PollLayout.js","components/PollFormOption.js","components/PollForm.js","components/PollModal.js","components/data.js","components/Poll.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","width","backgroundColor","padding","margin","height","bullet","display","transform","title","fontSize","pos","marginBottom","list","PollLayout","props","classes","useState","pollData","poll","setPoll","Card","className","variant","CardContent","Typography","component","question","CardActions","List","Object","entries","options","map","key","value","ListItem","button","onClick","optionNumber","option","selectedOption","keys","selectedOptionValue","prevState","handleDataChange","pollId","handleOptionClick","style","paddingLeft","position","Divider","PollFormOption","optionName","id","type","name","onChange","handleChange","required","PollForm","option1","setPollData","dynamicOption","setDynamicOption","optionId","setOptionId","event","target","onSubmit","preventDefault","handleAddNewPoll","border","rand","Math","round","random","theme","paper","palette","background","boxShadow","shadows","spacing","PollModal","React","getModalStyle","modalStyle","open","setOpen","body","borderRadius","Modal","onClose","aria-labelledby","aria-describedby","top","left","ALL_POLL","poll1","yes","option2","no","option3","maybe","poll2","Korean","Turkish","Brazilian","option4","Vietnamese","option5","Indian","flexWrap","justifyContent","Poll","allPoll","setAllPoll","updatedPollData","useEffect","console","log","length","newPoll","newPollId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab1b5e08.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    width: \"100px\",\r\n    backgroundColor: \"beige\",\r\n    padding: 10,\r\n    margin: 10,\r\n    height: \"auto\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  list: {\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nconst PollLayout = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [poll, setPoll] = useState(props.pollData);\r\n\r\n  //The following function is nothing but a lot of spread operator\r\n  /** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\r\n   * run the following example somewhere and you will undertstand the power of spread opertor\r\n   * const obj1 = { foo: \"bar\", x: 42 };\r\n   * const obj2 = { foo: \"baz\", y: 13 };\r\n   * //removes duplicate\r\n   * let obj3 = { ...obj1, ...obj2 }; //only keep values from second in the case of a duplicate\r\n   * console.log(obj3);\r\n   */\r\n  const handleOptionClick = (optionNumber, option) => {\r\n    const selectedOption = Object.keys(option)[0];\r\n    const selectedOptionValue = option[Object.keys(option)[0]];\r\n\r\n    setPoll((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        options: {\r\n          ...prevState.options,\r\n          [optionNumber]: {\r\n            [selectedOption]: selectedOptionValue + 1,\r\n          },\r\n        },\r\n      };\r\n    });\r\n\r\n    // now we may choose to upload only single poll in the backend:\r\n    // updatePollBackEnd(props.pollId, poll); // call backend\r\n\r\n    // This is if we instead want to update the main data,\r\n    // i.e. in the big data set\r\n    // this is just for fun\r\n    props.handleDataChange(props.pollId, poll);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {poll.question}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <List className={classes.list}>\r\n          {Object.entries(poll.options).map(([key, value]) => (\r\n            <div key={key}>\r\n              <ListItem\r\n                button\r\n                onClick={() => {\r\n                  handleOptionClick(key, value);\r\n                }}\r\n              >\r\n                <span>{Object.keys(value)}</span>\r\n                <span style={{ paddingLeft: 180, position: \"absolute\" }}>\r\n                  {value[Object.keys(value)]}\r\n                </span>\r\n              </ListItem>\r\n              <Divider />\r\n            </div>\r\n          ))}\r\n        </List>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PollLayout;\r\n","import React from \"react\";\r\n\r\nconst PollFormOption = (props) => {\r\n  let optionName = \"option\" + props.id;\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Option:\r\n        <input\r\n          type=\"text\"\r\n          name={optionName}\r\n          onChange={props.handleChange}\r\n          value={props.pollData.options[\"option\" + props.id]}\r\n          required\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollFormOption;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PollFormOption from \"./PollFormOption\";\r\n\r\nconst PollForm = (props) => {\r\n  const [pollData, setPollData] = useState({\r\n    question: \"\",\r\n    options: {\r\n      option1: { \"\": 0 },\r\n    },\r\n  });\r\n  const [dynamicOption, setDynamicOption] = useState([]);\r\n  const [optionId, setOptionId] = useState(2);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setPollData((prevState) => {\r\n      if (name === \"question\") {\r\n        return {\r\n          ...prevState,\r\n          [name]: value,\r\n        };\r\n      } else {\r\n        return {\r\n          ...prevState,\r\n          options: { ...prevState.options, [name]: { [value]: 0 } },\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.handleAddNewPoll(pollData);\r\n  };\r\n\r\n  const addOption = () => {\r\n    setDynamicOption((prevState) => {\r\n      return [\r\n        ...prevState,\r\n        <PollFormOption\r\n          key={optionId}\r\n          id={optionId}\r\n          handleChange={handleChange}\r\n          pollData={pollData}\r\n        />,\r\n      ];\r\n    });\r\n\r\n    setOptionId(optionId + 1);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"question\"\r\n            value={pollData.question}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Option:\r\n          <input\r\n            type=\"text\"\r\n            name=\"option1\"\r\n            value={Object.keys(pollData.options[\"option1\"])[0]}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n      {dynamicOption}\r\n      <br />\r\n      <div>\r\n        <span\r\n          onClick={addOption}\r\n          style={{ border: \"solid\", padding: \"5px 10px\" }}\r\n        >\r\n          + (Add option)\r\n        </span>\r\n      </div>\r\n      <br />\r\n      <input type=\"submit\" value=\"Submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PollForm;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport PollForm from \"./PollForm\";\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function PollModal(props) {\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const body = (\r\n    <div className={classes.paper} style={modalStyle}>\r\n      <PollForm handleAddNewPoll={props.handleAddNewPoll} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleOpen}\r\n        style={{ margin: 50, borderRadius: \"50%\", padding: 20 }}\r\n      >\r\n        Add a new poll\r\n      </button>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n// material -ui modal config\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n","export let ALL_POLL = {\r\n  poll1: {\r\n    question: \"would you go to party?\",\r\n    options: {\r\n      option1: { yes: 0 },\r\n      option2: { no: 0 },\r\n      option3: { maybe: 0 },\r\n    },\r\n  },\r\n  poll2: {\r\n    question: \"What food are we getting?\",\r\n    options: {\r\n      option1: { Korean: 0 },\r\n      option2: { Turkish: 0 },\r\n      option3: { Brazilian: 0 },\r\n      option4: { Vietnamese: 0 },\r\n      option5: { Indian: 0 },\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// componenets\r\nimport PollLayout from \"./PollLayout\";\r\nimport PollModal from \"./PollModal\";\r\n\r\n// data\r\nimport { ALL_POLL } from \"./data\";\r\n\r\nconst useStyles = makeStyles({\r\n  poll: {\r\n    padding: 20,\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nconst Poll = () => {\r\n  const classes = useStyles();\r\n  const [allPoll, setAllPoll] = useState(ALL_POLL);\r\n\r\n  // ignore this function for now\r\n  // come back to it at last\r\n  const handleDataChange = (pollId, updatedPollData) => {\r\n    setAllPoll((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [pollId]: updatedPollData,\r\n      };\r\n    });\r\n    // Now you may choose to send allPoll in the backend too\r\n    // this also has updated data\r\n    // updatePollBackEnd(allPoll); // call backend\r\n  };\r\n\r\n  const handleAddNewPoll = (newPoll) => {\r\n    const newPollId = \"poll\" + (Object.keys(allPoll).length + 1);\r\n    setAllPoll((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [newPollId]: newPoll,\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(Object.keys(allPoll).length);\r\n  }, [allPoll]);\r\n\r\n  return (\r\n    <div className={classes.poll}>\r\n      {Object.entries(allPoll).map(([key, value]) => (\r\n        <PollLayout\r\n          pollData={value}\r\n          key={key}\r\n          pollId={key}\r\n          handleDataChange={handleDataChange}\r\n        />\r\n      ))}\r\n      <PollModal handleAddNewPoll={handleAddNewPoll} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Poll;\r\n","import React from \"react\";\n\n// components\nimport Poll from \"./components/Poll\";\n\nfunction App() {\n  return <Poll />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}